Implementation of Conway's Game of Life in a functional oriented style using
python's iterators.

Points are represented by 2-tuple storing the x coordinate and y coordinate in
the board.

At every round, all alive points and only alive points are stored in a hash set
which allows O(1) access and test for presence.

The function update() find all points with 1 or more living neighbors and
compute the number of neighbors for all these points, using the 3 functions
translate(), translate_all() and update_count().

Then, update() uses this count data, presence of points in the set and calls to
survive() to generate a new set of living points for the next round.

The algorithm for computing the number of neighbors is based on moving average
filters. The set of living points is translated by one in all possible
directions and added together. The result is a grid of sums which directly tells
the number of living neighbors for every points in the board.

For example let's assume the set of living point is:
 ______
|      |
| x x  |
| xxxx |
|      |
|______|

All translated sets are:
 ______   ______   ______   ______   ______   ______   ______   ______
|x x   | | x x  | |  x x | |      | |      | |      | |      | |      |
|xxxx  | | xxxx | |  xxxx| |x x   | |  x x | |      | |      | |      |
|      | |      | |      | |xxxx  | |  xxxx| |x x   | | x x  | |  x x |
|      | |      | |      | |      | |      | |xxxx  | | xxxx | |  xxxx|
|______| |______| |______| |______| |______| |______| |______| |______|

The sum over these 8 sets is:
 ______
|11211 |
|225331|
|224321|
|123321|
|______|

The living points for next round are
 ______
|      |
| x xx |
| x xx |
|  xx  |
|______|
