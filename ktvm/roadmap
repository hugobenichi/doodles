reorganize vm around program and function struct
------------------------------------------------
  -> while thinking about how to support program reference as first class values
  -> while thinking about how to support compilation modules

first of all cut stuff into multiple files:
  - instr.{h,c}
      - static table
      - name table
      - name_of function
      - multibyte
  - program.{h,c}
      - fn and program struct, or replace program
      - disassembly function
      - object file parser/serializer
      - library for declaring programs programatically
  - datastack.{h,c}
  - callstack.{h,c}
  - vm.{h,c}
      replace ctx

once cut into files, add missing features
  - change jump instrs to forward only
  - add mutally recursive functions with recur2
  - add bytecode verifier which compute function frame size

midterm:
  compiler + simple arithmetic languages
  heap, data struct, closures
  GC
  strings, arrays, basic IOs
  some benchmarks ahah

rm interpreter loop
  (done) instr switch
  (done) goto pointers
    decode the bytecode instructions into labels in single buffer upfront
    try removing the data stack checks and see the effect
  jit compiler from goto pointers
